import argparse
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from stable_baselines3 import PPO
from env.btc_futures_env import BTCFuturesEnv
import yaml
import os
import sys
from pyfolio import timeseries  # For advanced metrics

# –î–æ–±–∞–≤–∏—Ç—å –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH –Ω–∞ —Å–ª—É—á–∞–π –∑–∞–ø—É—Å–∫–∞ –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç
sys.path.append('.')

def main(model_path, data_path, config_path):
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ URL)
    is_url = data_path.startswith('http://') or data_path.startswith('https://')
    try:
        if is_url:
            test_data = pd.read_csv(data_path)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —Å URL. –†–∞–∑–º–µ—Ä: {test_data.shape}")
        else:
            if not os.path.exists(data_path):
                print(f"‚ùå –§–∞–π–ª –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω: {data_path}")
                return
            test_data = pd.read_csv(data_path)
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞. –†–∞–∑–º–µ—Ä: {test_data.shape}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return

    # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã—Ö –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º
    column_renames = {}
    if "Date" not in test_data.columns:
        if "Open time" in test_data.columns:
            column_renames["Open time"] = "Date"
    if column_renames:
        test_data = test_data.rename(columns=column_renames)

    # –ü—Ä–∏–≤–µ—Å—Ç–∏ –≤—Å–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å env
    test_data.columns = [c.lower() for c in test_data.columns]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–∞–Ω–Ω—ã—Ö
    required_columns = ["date", "open", "high", "low", "close", "volume"]
    missing_cols = [col for col in required_columns if col not in test_data.columns]
    if missing_cols:
        print(f"‚ùå –í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {missing_cols}")
        return
    if test_data[required_columns].isnull().any().any():
        print("‚ùå –í –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è!")
        return
    test_data = test_data.sort_values("date").reset_index(drop=True)
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—é –∏ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –¥–∞—Ç–µ.")

    # 2. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥–∞
    if not os.path.exists(config_path):
        print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {config_path}")
        return
    with open(config_path, 'r') as f:
        config = yaml.safe_load(f)

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ä–µ–¥—ã
    env = BTCFuturesEnv(config, test_data)

    # 4. –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    if not os.path.exists(model_path):
        print(f"‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
        return
    model = PPO.load(model_path)
    print(f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞: {model_path}")

    # 5. –ó–∞–ø—É—Å–∫ –æ—Ü–µ–Ω–∫–∏
    portfolio_history = []
    state, _ = env.reset()
    done = False
    steps = 0
    while not done:
        action, _ = model.predict(state)
        next_state, reward, terminated, truncated, info = env.step(int(action))
        state = next_state
        portfolio_history.append(env.equity)
        done = terminated or truncated
        steps += 1

    # 6. –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    plt.figure(figsize=(12, 6))
    plt.plot(portfolio_history)
    plt.title("–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è")
    plt.xlabel("–®–∞–≥")
    plt.ylabel("–°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è (USD)")
    plt.grid(True)
    plt.savefig("portfolio_trend.png")
    print("üìà –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: portfolio_trend.png")

    # 7. –†–∞—Å—á–µ—Ç –º–µ—Ç—Ä–∏–∫
initial_balance = env.initial_balance
final_balance = env.equity
returns = (final_balance - initial_balance) / initial_balance * 100
# –†–∞—Å—á–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ—Å–∞–¥–∫–∏
peak = initial_balance
max_drawdown = 0
for value in portfolio_history:
    if value > peak:
        peak = value
    drawdown = (peak - value) / peak * 100
    if drawdown > max_drawdown:
        max_drawdown = drawdown

# --- Advanced statistics ---
returns_series = pd.Series(np.diff(portfolio_history) / np.array(portfolio_history[:-1]))
try:
    sharpe_ratio = timeseries.sharpe_ratio(returns_series)
    max_dd = timeseries.max_drawdown(returns_series)
    calmar_ratio = returns_series.mean() / max_dd if max_dd != 0 else np.nan
except Exception as e:
    sharpe_ratio = np.nan
    max_dd = np.nan
    calmar_ratio = np.nan

print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—Ü–µ–Ω–∫–∏:")
print(f"–ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: ")
print(f"–ö–æ–Ω–µ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: ")
print(f"–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: {returns:.2f}%")
print(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ—Å–∞–¥–∫–∞: {max_drawdown:.2f}%")
print(f"Sharpe Ratio: {sharpe_ratio:.2f}")
print(f"Calmar Ratio: {calmar_ratio:.2f}")

# 8. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª–æ–≥–æ–≤
    log_df = pd.DataFrame({
        'step': np.arange(len(portfolio_history)),
        'portfolio_value': portfolio_history
    })
    log_df.to_csv('evaluation_log.csv', index=False)
    print("üìù –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: evaluation_log.csv")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('--model', type=str, required=True, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –º–æ–¥–µ–ª–∏')
    parser.add_argument('--data', type=str, required=True, help='–ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –¥–∞–Ω–Ω—ã–º')
    parser.add_argument('--config', type=str, default='configs/btc_futures.yaml', help='–ü—É—Ç—å –∫ –∫–æ–Ω—Ñ–∏–≥—É —Å—Ä–µ–¥—ã')
    args = parser.parse_args()
    main(args.model, args.data, args.config)
